{
  "openapi": "3.0.0",
  "servers": [],
  "info": {
    "description": "This defines the baseline for middleTier-to-frontEnd Generic Search APIs for MarkLogic-UI-Resources (MUIR).",
    "version": "0.0.2",
    "title": "MUIR Middle-tier Generic Search API",
    "license": {
      "name": "Apache-2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "paths": {
    "/search": {
      "post": {
        "description": "Search all entities, returning all available search facets with values as well as matching items. The definition of entity is up to the application.",
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "description": "Type of object to search, which may have meaning for a specific application.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "namedOptions",
            "in": "query",
            "description": "The name of saved search options to use in the search.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "start",
            "in": "query",
            "description": "result to start on for pagination",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            },
            "required": false
          },
          {
            "name": "pageLength",
            "in": "query",
            "description": "maximum number of results to return",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 10
            },
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchFacetsAndResults"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/search/facets": {
      "post": {
        "description": "Search through all objects of type `{type}`, returning all available search facets with values",
        "parameters": [
          {
            "name": "pluralType",
            "in": "path",
            "description": "Plural type of object",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchFacets"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/search/results": {
      "post": {
        "description": "Search through all objects of type `{type}`, returning matching items",
        "parameters": [
          {
            "name": "pluralType",
            "in": "path",
            "description": "Plural type of object",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "The index of the first result to return. The first result is index 1. Default: 1.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 1
            },
            "required": false
          },
          {
            "name": "pageLength",
            "in": "query",
            "description": "The maximum number of results to return in this request. Default: 10.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 1
            },
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchResults"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    }
  },
  "security": [],
  "components": {
    "links": {},
    "callbacks": {},
    "schemas": {
      "SearchRequest": {
        "type": "object",
        "properties": {
          "queryText": {
            "type": "string"
          },
          "filters": {
            "$ref": "#/components/schemas/Filters"
          },
          "query": {
            "$ref": "#/components/schemas/SearchQuery"
          }
        }
      },
      "Filters": {
        "description": "A map from Constraint names to FilterValues. There is an implicit AND between them",
        "type": "object",
        "additionalProperties": {
          "$ref": "#/components/schemas/FilterValue"
        },
        "example": {
          "firstName": "Patrick",
          "active": true,
          "eyeColor": {
            "or": [
              "blue",
              "brown"
            ]
          },
          "age": {
            "and": [
              21,
              22
            ]
          },
          "lastName": {
            "not": "Stewart"
          },
          "occupationCategory": {
            "or": [
              "software",
              {
                "and": [
                  "IT",
                  {
                    "not": {
                      "or": [
                        "marketing",
                        "support"
                      ]
                    }
                  }
                ]
              }
            ]
          }
        }
      },
      "FilterValue": {
        "description": "A combined type, which could be a selected atomic value, or some combination of AND, OR, and NOT, allowing for recursive structures.",
        "oneOf": [
          {
            "type": "string"
          },
          {
            "type": "number"
          },
          {
            "type": "boolean"
          },
          {
            "$ref": "#/components/schemas/AndFilter"
          },
          {
            "$ref": "#/components/schemas/OrFilter"
          },
          {
            "$ref": "#/components/schemas/NotFilter"
          }
        ]
      },
      "AndFilter": {
        "description": "A filter representing an AND between FilterValues.",
        "type": "object",
        "properties": {
          "and": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FilterValue"
            }
          }
        },
        "required": [
          "and"
        ]
      },
      "OrFilter": {
        "description": "A filter representing an OR between FilterValues.",
        "type": "object",
        "properties": {
          "or": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FilterValue"
            }
          }
        },
        "required": [
          "or"
        ]
      },
      "NotFilter": {
        "description": "A negation of one FilterValue",
        "type": "object",
        "properties": {
          "not": {
            "$ref": "#/components/schemas/FilterValue"
          }
        },
        "required": [
          "not"
        ]
      },
      "SearchQuery": {
        "type": "object",
        "properties": {}
      },
      "SearchFacetsAndResults": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer"
          },
          "start": {
            "type": "integer"
          },
          "pageLength": {
            "type": "integer"
          },
          "facets": {
            "type": "object",
            "properties": {
              "*": {
                "$ref": "#/components/schemas/SearchFacet"
              }
            }
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SearchResult"
            }
          }
        },
        "required": [
          "total",
          "facets",
          "results"
        ]
      },
      "SearchResults": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer"
          },
          "start": {
            "type": "integer"
          },
          "pageLength": {
            "type": "integer"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SearchResult"
            }
          }
        },
        "required": [
          "total",
          "results"
        ]
      },
      "SearchResult": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "matches": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "id"
        ]
      },
      "SearchFacets": {
        "type": "object",
        "properties": {
          "facets": {
            "type": "object",
            "properties": {
              "*": {
                "$ref": "#/components/schemas/SearchFacet"
              }
            }
          }
        },
        "required": [
          "facets"
        ]
      },
      "SearchFacet": {
        "type": "object",
        "properties": {
          "label": {
            "type": "string"
          },
          "limit": {
            "type": "integer"
          },
          "total": {
            "type": "integer"
          },
          "order": {
            "type": "string",
            "enum": [
              "frequency-order",
              "item-order"
            ]
          },
          "direction": {
            "type": "string",
            "enum": [
              "ascending",
              "descending"
            ]
          },
          "facetValues": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FacetValue"
            }
          }
        },
        "required": [
          "facetValues"
        ]
      },
      "FacetValue": {
        "type": "object",
        "properties": {
          "label": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "count": {
            "type": "integer"
          }
        },
        "required": [
          "name",
          "count"
        ]
      }
    },
    "securitySchemes": {}
  }
}
